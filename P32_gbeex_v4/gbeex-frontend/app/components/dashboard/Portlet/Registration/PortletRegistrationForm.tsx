// app/components/dashboard/Portlet/Registration/PortletRegistrationForm.tsx
"use client";

import React, {
  useState,
  FormEvent,
  useContext,
  useEffect,
  useMemo,
} from "react";
import { useSession } from "next-auth/react";
import { PortletContext } from "@/app/context/PortletContext";
import type {
  PortletBase,
  PortletCategory,
  PortletRenderMechanism,
} from "@/app/types/portlet";
import PortletBasicDetailsForm from "./PortletBasicDetailsForm";
import PortletRenderMechanismForm from "./PortletRenderMechanismForm";
import PortletChildSettingsForm from "./PortletChildSettingsForm";
import PortletAdditionalFieldsForm from "./PortletAdditionalFieldsForm";
import PortletPreviewPanel from "./PortletPreviewPanel";
import styles from "./PortletRegistrationForm.module.css";
import HelpTooltip from "@/app/components/common/HelpTooltip";

export default function PortletRegistrationForm() {
  const { registerPortlet, portlets } = useContext(PortletContext);
  const { data: session } = useSession();

  const getCurrentUserName = (): string => {
    return session?.user?.name ?? "anonymous";
  };

  const [payload, setPayload] = useState<PortletBase>({
    key: "",
    title: "",
    category: "generic",
    description: "",
    longDescription: undefined,
    enabled: true,
    order: portlets.length,
    renderMechanism: "component",
    url: undefined,
    componentName: undefined,
    isChild: false,
    parentPath: undefined,
    createdBy: getCurrentUserName(),
    testNotes: undefined,
    settings: {},
  });

  const [settingsText, setSettingsText] = useState<string>("{}");
  const [message, setMessage] = useState<string>("");
  const [messageType, setMessageType] = useState<"success" | "error" | "">("");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [isPreviewMode, setIsPreviewMode] = useState<boolean>(false);

  const [showLongDescriptionField, setShowLongDescriptionField] =
    useState(false);
  const [showTestNotesField, setShowTestNotesField] = useState(false);
  const [showSettingsField, setShowSettingsField] = useState(false);

  const autoGeneratedKey = useMemo(() => {
    const slugify = (text: string) => {
      return text
        .toString()
        .toLowerCase()
        .replace(/\s+/g, "-")
        .replace(/[^\w-]+/g, "")
        .replace(/--+/g, "-")
        .replace(/-+$/, "");
    };

    const titlePart = slugify(payload.title).slice(0, 20);
    const categoryPart = payload.category.slice(0, 10);

    const suffix = Date.now().toString().slice(-6);

    return `${titlePart || "portlet"}-${categoryPart || "generic"}-${suffix}`;
  }, [payload.title, payload.category]);

  // Update createdBy and order when session or portlets change
  useEffect(() => {
    const currentSessionUserName = getCurrentUserName();
    setPayload((prev) => ({
      ...prev,
      createdBy: currentSessionUserName,
      order: portlets.length, // Update order to reflect current count
    }));
  }, [session, portlets.length]); // Added portlets.length to dependencies

  const handleChange = (k: keyof PortletBase, v: any) => {
    setPayload((p) => {
      const newState = { ...p, [k]: v };
      if (k === "isChild" && !v) newState.parentPath = undefined;
      if (k === "renderMechanism") {
        if (v === "iframe") {
          newState.componentName = undefined;
        } else if (v === "component") {
          newState.url = undefined;
        }
      }
      return newState;
    });
  };

  const handleSettings = (txt: string) => {
    setSettingsText(txt);
    try {
      const parsedSettings = JSON.parse(txt);
      handleChange("settings", parsedSettings);
      setMessage("");
      setMessageType("");
    } catch {
      setMessage("Invalid JSON in settings field.");
      setMessageType("error");
      handleChange("settings", {});
    }
  };

  const handlePreview = (e: FormEvent) => {
    e.preventDefault();
    setMessage("");
    setMessageType("");

    const currentPayloadForValidation = {
      ...payload,
      key: payload.key || autoGeneratedKey, // Use auto-generated key if not provided
    };

    // Basic required field validation
    if (
      !currentPayloadForValidation.key ||
      !currentPayloadForValidation.title ||
      !currentPayloadForValidation.category ||
      !currentPayloadForValidation.description
    ) {
      setMessage(
        "Please fill in all required basic portlet details (Portlet Key, Title, Category, Description)."
      );
      setMessageType("error");
      return;
    }

    // Render mechanism specific validation
    if (
      currentPayloadForValidation.renderMechanism === "iframe" &&
      !currentPayloadForValidation.url
    ) {
      setMessage("URL is required for 'External URL (Iframe)' portlet type.");
      setMessageType("error");
      return;
    }
    if (
      currentPayloadForValidation.renderMechanism === "component" &&
      !currentPayloadForValidation.componentName
    ) {
      setMessage(
        "Component Name is required for 'Local React Component' portlet type."
      );
      setMessageType("error");
      return;
    }

    // Child portlet validation
    if (
      currentPayloadForValidation.isChild &&
      !currentPayloadForValidation.parentPath
    ) {
      setMessage("Parent Path is required for child portlets.");
      setMessageType("error");
      return;
    }

    // Settings JSON validation
    if (
      showSettingsField &&
      messageType === "error" && // Check if there's an existing JSON error
      message.includes("JSON")
    ) {
      setMessage(
        "Please correct the invalid JSON in the settings field before previewing."
      );
      setMessageType("error");
      return;
    }

    // Finalize payload for preview (remove optional fields if unchecked)
    const finalPayload = { ...currentPayloadForValidation };
    if (!showLongDescriptionField) finalPayload.longDescription = undefined;
    if (!showTestNotesField) finalPayload.testNotes = undefined;
    if (!showSettingsField) finalPayload.settings = {};

    setPayload(finalPayload); // Update payload state with auto-generated key if used
    setIsPreviewMode(true);
    setMessage("Review your portlet details before final submission.");
    setMessageType("success");
  };

  const handleSubmit = async () => {
    setIsLoading(true);
    setMessage(""); // Clear messages at the start of submission
    setMessageType("");

    try {
      // Await registerPortlet. If it throws, the catch block will execute.
      await registerPortlet(payload);

      setMessage("Portlet registered successfully!");
      setMessageType("success");

      // --- Reset form to initial state AFTER successful registration ---
      setPayload({
        key: "",
        title: "",
        category: "generic",
        description: "",
        longDescription: undefined,
        enabled: true,
        order: portlets.length + 1, // Update order for next new portlet
        renderMechanism: "component",
        url: undefined,
        componentName: undefined,
        isChild: false,
        parentPath: undefined,
        createdBy: getCurrentUserName(),
        testNotes: undefined,
        settings: {},
      });
      setSettingsText("{}");
      setShowLongDescriptionField(false);
      setShowTestNotesField(false);
      setShowSettingsField(false);
      setIsPreviewMode(false); // Go back to edit mode only on success
    } catch (error: any) {
      console.error("Registration failed:", error);
      // Display specific error message from the context/registration function
      setMessage(
        `Registration failed: ${
          error.message || "An unexpected error occurred."
        }`
      );
      setMessageType("error");
    } finally {
      setIsLoading(false); // Always clear loading state
    }
  };

  const handleReset = () => {
    setPayload({
      key: "",
      title: "",
      category: "generic",
      description: "",
      longDescription: undefined,
      enabled: true,
      order: portlets.length, // Reset order to current count
      renderMechanism: "component",
      url: undefined,
      componentName: undefined,
      isChild: false,
      parentPath: undefined,
      createdBy: getCurrentUserName(),
      testNotes: undefined,
      settings: {},
    });
    setSettingsText("{}");
    setMessage("");
    setMessageType("");
    setIsPreviewMode(false);
    setShowLongDescriptionField(false);
    setShowTestNotesField(false);
    setShowSettingsField(false);
  };

  return (
    <div className={styles.formContainer}>
      <h2 className={styles.title}>Register a New Portlet</h2>
      <p className={styles.subtitle}>
        Enter the details for the new portlet you want to add.
      </p>

      {message && (
        <div
          className={`${styles.messageBox} ${
            messageType === "success" ? styles.success : styles.error
          }`}
        >
          {message}
        </div>
      )}

      {!isPreviewMode ? (
        <form className={styles.form} onSubmit={handlePreview}>
          <PortletBasicDetailsForm
            payload={payload}
            handleChange={handleChange}
            autoGeneratedKey={autoGeneratedKey}
            portletsLength={portlets.length}
          />

          <PortletRenderMechanismForm
            payload={payload}
            handleChange={handleChange}
          />

          <PortletChildSettingsForm
            payload={payload}
            handleChange={handleChange}
          />

          {/* Created By is still in main form for now, could be moved */}
          <div className={styles.inputGroup}>
            <div className={styles.inputGroupHeader}>
              <label className={styles.label}>
                Created By <span className={styles.required}>*</span>
              </label>
              <HelpTooltip>
                The name or role of the individual or team responsible for
                creating or configuring this portlet. This defaults to your
                current session username, but can be overridden if needed (e.g.,
                for system accounts).
              </HelpTooltip>
            </div>
            <input
              type="text"
              value={payload.createdBy}
              onChange={(e) => handleChange("createdBy", e.target.value)}
              className={styles.input}
              required
            />
          </div>

          <PortletAdditionalFieldsForm
            payload={payload}
            handleChange={handleChange}
            settingsText={settingsText}
            handleSettings={handleSettings}
            messageType={messageType}
            message={message}
            showLongDescriptionField={showLongDescriptionField}
            setShowLongDescriptionField={setShowLongDescriptionField}
            showTestNotesField={showTestNotesField}
            setShowTestNotesField={setShowTestNotesField}
            showSettingsField={showSettingsField}
            setShowSettingsField={setShowSettingsField}
          />

          <div className={styles.formActions}>
            <button
              type="submit"
              className={`${styles.btn} ${styles.btnPrimary}`}
              disabled={
                isLoading ||
                (messageType === "error" && message.includes("JSON"))
              }
            >
              {isLoading ? "Processing..." : "Preview Portlet"}
            </button>
            <button
              type="button"
              className={`${styles.btn} ${styles.btnSecondary}`}
              onClick={handleReset}
              disabled={isLoading}
            >
              Reset Form
            </button>
          </div>
        </form>
      ) : (
        <PortletPreviewPanel
          payload={payload}
          handleSubmit={handleSubmit}
          setIsPreviewMode={setIsPreviewMode}
          isLoading={isLoading}
        />
      )}
    </div>
  );
}
