// app/components/dashboard/Portlet/Registration/PortletRegistrationForm.tsx
"use client";

import React, {
  useState,
  FormEvent,
  useContext,
  useEffect,
  useMemo,
  ReactNode,
} from "react";
import { useSession } from "next-auth/react";

import { PortletContext } from "@/app/context/PortletContext";
import type {
  PortletBase,
  PortletCategory,
  PortletRenderMechanism,
} from "@/app/types/portlet";
import styles from "./PortletRegistrationForm.module.css";

// --- InfoIcon Component ---
const InfoIcon: React.FC<{ className?: string }> = ({ className }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="16"
    height="16"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    strokeLinecap="round"
    strokeLinejoin="round"
    className={className}
  >
    <circle cx="12" cy="12" r="10"></circle>
    <line x1="12" y1="16" x2="12" y2="12"></line>
    <line x1="12" y1="8" x2="12.01" y2="8"></line>
  </svg>
);

// --- HelpTooltip Component ---
interface HelpTooltipProps {
  children: ReactNode; // The help text content
}

const HelpTooltip: React.FC<HelpTooltipProps> = ({ children }) => {
  const [isVisible, setIsVisible] = useState(false);
  const timeoutRef = React.useRef<NodeJS.Timeout | null>(null);

  const show = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
    setIsVisible(true);
  };

  const hide = () => {
    timeoutRef.current = setTimeout(() => {
      setIsVisible(false);
    }, 100);
  };

  const toggle = (e: React.MouseEvent) => {
    e.stopPropagation();
    setIsVisible((prev) => !prev);
  };

  return (
    <div className={styles.helpTooltipContainer}>
      <span
        className={styles.infoIconWrapper}
        onMouseEnter={show}
        onMouseLeave={hide}
        onClick={toggle}
        role="button"
        aria-label={isVisible ? "Hide help" : "Show help"}
        aria-expanded={isVisible}
      >
        <InfoIcon className={styles.infoIcon} />
      </span>
      {isVisible && ( // Only render the div when isVisible is true
        <div
          className={`${styles.helpTooltipContent} ${styles.helpTooltipContentVisible}`}
          onMouseEnter={show}
          onMouseLeave={hide}
        >
          {children}
        </div>
      )}
    </div>
  );
};

export default function PortletRegistrationForm() {
  const { registerPortlet, portlets } = useContext(PortletContext);
  const { data: session } = useSession();

  const getCurrentUserName = (): string => {
    return session?.user?.name ?? "anonymous";
  };

  const [payload, setPayload] = useState<PortletBase>({
    key: "",
    title: "",
    category: "generic",
    description: "",
    longDescription: undefined,
    enabled: true,
    order: portlets.length,
    renderMechanism: "component",
    url: undefined,
    componentName: undefined,
    isChild: false,
    parentPath: undefined,
    createdBy: getCurrentUserName(),
    testNotes: undefined,
    settings: {},
  });

  const [settingsText, setSettingsText] = useState<string>("{}");
  const [message, setMessage] = useState<string>("");
  const [messageType, setMessageType] = useState<"success" | "error" | "">("");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [isPreviewMode, setIsPreviewMode] = useState<boolean>(false);

  const [showLongDescriptionField, setShowLongDescriptionField] =
    useState(false);
  const [showTestNotesField, setShowTestNotesField] = useState(false);
  const [showSettingsField, setShowSettingsField] = useState(false);

  const autoGeneratedKey = useMemo(() => {
    const slugify = (text: string) => {
      return text
        .toString()
        .toLowerCase()
        .replace(/\s+/g, "-")
        .replace(/[^\w-]+/g, "")
        .replace(/--+/g, "-")
        .replace(/^-+/, "")
        .replace(/-+$/, "");
    };

    const titlePart = slugify(payload.title).slice(0, 20);
    const categoryPart = payload.category.slice(0, 10);

    const suffix = Date.now().toString().slice(-6);

    return `${titlePart || "portlet"}-${categoryPart || "generic"}-${suffix}`;
  }, [payload.title, payload.category]);

  useEffect(() => {
    const currentSessionUserName = getCurrentUserName();
    if (payload.createdBy !== currentSessionUserName) {
      setPayload((prev) => ({ ...prev, createdBy: currentSessionUserName }));
    }
  }, [session, payload.createdBy]);

  const handleChange = (k: keyof PortletBase, v: any) => {
    setPayload((p) => {
      const newState = { ...p, [k]: v };
      if (k === "isChild" && !v) newState.parentPath = undefined;
      if (k === "renderMechanism") {
        if (v === "iframe") {
          newState.componentName = undefined;
        } else if (v === "component") {
          newState.url = undefined;
        }
      }
      return newState;
    });
  };

  const handleSettings = (txt: string) => {
    setSettingsText(txt);
    try {
      const parsedSettings = JSON.parse(txt);
      handleChange("settings", parsedSettings);
      setMessage("");
      setMessageType("");
    } catch {
      setMessage("Invalid JSON in settings field.");
      setMessageType("error");
      handleChange("settings", {});
    }
  };

  const handlePreview = (e: FormEvent) => {
    e.preventDefault();
    setMessage("");
    setMessageType("");

    if (!payload.key) {
      setPayload((prev) => ({ ...prev, key: autoGeneratedKey }));
    }

    const currentPayloadForValidation = {
      ...payload,
      key: payload.key || autoGeneratedKey,
    };

    if (
      !currentPayloadForValidation.key ||
      !currentPayloadForValidation.title ||
      !currentPayloadForValidation.category ||
      !currentPayloadForValidation.description
    ) {
      setMessage(
        "Please fill in all required basic portlet details (Portlet Key, Title, Category, Description)."
      );
      setMessageType("error");
      return;
    }

    if (
      currentPayloadForValidation.renderMechanism === "iframe" &&
      !currentPayloadForValidation.url
    ) {
      setMessage("URL is required for 'External URL (Iframe)' portlet type.");
      setMessageType("error");
      return;
    }
    if (
      currentPayloadForValidation.renderMechanism === "component" &&
      !currentPayloadForValidation.componentName
    ) {
      setMessage(
        "Component Name is required for 'Local React Component' portlet type."
      );
      setMessageType("error");
      return;
    }

    if (
      currentPayloadForValidation.isChild &&
      !currentPayloadForValidation.parentPath
    ) {
      setMessage("Parent Path is required for child portlets.");
      setMessageType("error");
      return;
    }

    if (
      showSettingsField &&
      messageType === "error" &&
      message.includes("JSON")
    ) {
      setMessage(
        "Please correct the invalid JSON in the settings field before previewing."
      );
      setMessageType("error");
      return;
    }

    const finalPayload = { ...currentPayloadForValidation };
    if (!showLongDescriptionField) finalPayload.longDescription = undefined;
    if (!showTestNotesField) finalPayload.testNotes = undefined;
    if (!showSettingsField) finalPayload.settings = {};

    setPayload(finalPayload);
    setIsPreviewMode(true);
    setMessage("Review your portlet details before final submission.");
    setMessageType("success");
  };

  const handleSubmit = async () => {
    setIsLoading(true);
    setMessage("");
    setMessageType("");

    try {
      await registerPortlet(payload);
      setMessage("Portlet registered successfully!");
      setMessageType("success");

      setPayload({
        key: "",
        title: "",
        category: "generic",
        description: "",
        longDescription: undefined,
        enabled: true,
        order: portlets.length + 1,
        renderMechanism: "component",
        url: undefined,
        componentName: undefined,
        isChild: false,
        parentPath: undefined,
        createdBy: getCurrentUserName(),
        testNotes: undefined,
        settings: {},
      });
      setSettingsText("{}");
      setShowLongDescriptionField(false);
      setShowTestNotesField(false);
      setShowSettingsField(false);
      setIsPreviewMode(false);
    } catch (error: any) {
      console.error("Registration failed:", error);
      if (
        error.message &&
        error.message.includes("Portlet with key") &&
        error.message.includes("already exists")
      ) {
        setMessage(
          `Registration failed: The portlet key "${payload.key}" already exists. Please choose a different one or leave blank to auto-generate.`
        );
        setMessageType("error");
      } else {
        setMessage(
          `Registration failed: ${
            error.message || "An unexpected error occurred."
          }`
        );
        setMessageType("error");
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleReset = () => {
    setPayload({
      key: "",
      title: "",
      category: "generic",
      description: "",
      longDescription: undefined,
      enabled: true,
      order: portlets.length,
      renderMechanism: "component",
      url: undefined,
      componentName: undefined,
      isChild: false,
      parentPath: undefined,
      createdBy: getCurrentUserName(),
      testNotes: undefined,
      settings: {},
    });
    setSettingsText("{}");
    setMessage("");
    setMessageType("");
    setIsPreviewMode(false);
    setShowLongDescriptionField(false);
    setShowTestNotesField(false);
    setShowSettingsField(false);
  };

  return (
    <div className={styles.formContainer}>
      <div className={styles.formWrapper}>
        <h2 className={styles.title}>Register a New Portlet</h2>
        <p className={styles.subtitle}>
          Enter the details for the new portlet you want to add.
        </p>

        {message && (
          <div
            className={`${styles.messageBox} ${
              messageType === "success" ? styles.success : styles.error
            }`}
          >
            {message}
          </div>
        )}

        {!isPreviewMode ? (
          <form className={styles.form} onSubmit={handlePreview}>
            {/* Portlet Key Input with HelpTooltip */}
            <div className={styles.inputGroup}>
              <div className={styles.inputGroupHeader}>
                <label className={styles.label}>
                  Portlet Key <span className={styles.required}>*</span>
                </label>
                <HelpTooltip>
                  A unique, programmatic identifier for this portlet (e.g.,
                  `user-profile-summary`). This key is used for internal lookups
                  and URL segments. If left blank, a unique key will be
                  automatically generated based on the title and category.
                </HelpTooltip>
              </div>
              <input
                type="text"
                value={payload.key}
                onChange={(e) => handleChange("key", e.target.value)}
                className={styles.input}
                placeholder={autoGeneratedKey}
                required
              />
            </div>

            {/* Title Input with HelpTooltip */}
            <div className={styles.inputGroup}>
              <div className={styles.inputGroupHeader}>
                <label className={styles.label}>
                  Title <span className={styles.required}>*</span>
                </label>
                <HelpTooltip>
                  The human-readable display name for this portlet (e.g., "User
                  Profile Summary Card"). This title will be visible in the
                  sidebar and as the tab name in the content area.
                </HelpTooltip>
              </div>
              <input
                type="text"
                value={payload.title}
                onChange={(e) => handleChange("title", e.target.value)}
                className={styles.input}
                required
              />
            </div>

            {/* Category Input with HelpTooltip */}
            <div className={styles.inputGroup}>
              <div className={styles.inputGroupHeader}>
                <label className={styles.label}>
                  Category <span className={styles.required}>*</span>
                </label>
                <HelpTooltip>
                  Assign a category to help organize and filter portlets within
                  the portal. This helps users quickly find relevant content
                  based on their functional area.
                </HelpTooltip>
              </div>
              <select
                value={payload.category}
                onChange={(e) =>
                  handleChange("category", e.target.value as PortletCategory)
                }
                className={styles.select}
                required
              >
                <option value="analytics">Analytics</option>
                <option value="visualization">Visualization</option>
                <option value="generic">Generic</option>
                <option value="report">Report</option>
                <option value="workflow">Workflow</option>
                <option value="other">Other</option>
              </select>
            </div>

            {/* Description Input with HelpTooltip */}
            <div className={styles.inputGroup}>
              <div className={styles.inputGroupHeader}>
                <label className={styles.label}>
                  Description <span className={styles.required}>*</span>
                </label>
                <HelpTooltip>
                  A brief, concise summary of the portlet's main purpose or
                  content. This description might appear in tooltips, search
                  results, or quick summaries.
                </HelpTooltip>
              </div>
              <input
                type="text"
                value={payload.description}
                onChange={(e) => handleChange("description", e.target.value)}
                className={styles.input}
                required
              />
            </div>

            {/* Enabled Checkbox with HelpTooltip */}
            <div className={styles.checkboxGroup}>
              <label className={styles.checkboxLabel}>
                <input
                  type="checkbox"
                  checked={payload.enabled}
                  onChange={(e) => handleChange("enabled", e.target.checked)}
                  className={styles.checkbox}
                />
                Enabled
              </label>
              <HelpTooltip>
                Controls whether this portlet is currently active and visible to
                users in the portal. Uncheck this option to temporarily hide the
                portlet without deleting its configuration.
              </HelpTooltip>
            </div>

            {/* Order Input with HelpTooltip */}
            <div className={styles.inputGroup}>
              <div className={styles.inputGroupHeader}>
                <label className={styles.label}>
                  Order <span className={styles.required}>*</span>
                </label>
                <HelpTooltip>
                  Defines the display priority of the portlet within its
                  category or list. Portlets with lower numbers (e.g., 1, 2)
                  will appear before those with higher numbers.
                </HelpTooltip>
              </div>
              <input
                type="number"
                value={payload.order}
                onChange={(e) =>
                  handleChange("order", parseInt(e.target.value, 10) || 0)
                }
                className={styles.input}
                required
              />
            </div>

            {/* Render As Radio Group with HelpTooltip */}
            <div className={styles.inputGroup}>
              <div className={styles.inputGroupHeader}>
                <label className={styles.label}>
                  Render As <span className={styles.required}>*</span>
                </label>
                <HelpTooltip>
                  Choose how the portlet's content will be rendered: as a
                  pre-built React component directly within the application, or
                  as an embedded external web page using an iframe.
                </HelpTooltip>
              </div>
              <div className={styles.radioGroup}>
                <label className={styles.radioLabel}>
                  <input
                    type="radio"
                    name="renderMechanism"
                    value="component"
                    checked={payload.renderMechanism === "component"}
                    onChange={() =>
                      handleChange(
                        "renderMechanism",
                        "component" as PortletRenderMechanism
                      )
                    }
                    className={styles.radio}
                  />
                  Local React Component
                </label>
                <label className={styles.radioLabel}>
                  <input
                    type="radio"
                    name="renderMechanism"
                    value="iframe"
                    checked={payload.renderMechanism === "iframe"}
                    onChange={() =>
                      handleChange(
                        "renderMechanism",
                        "iframe" as PortletRenderMechanism
                      )
                    }
                    className={styles.radio}
                  />
                  External URL (Iframe)
                </label>
              </div>
            </div>

            {/* Conditional URL Input with HelpTooltip */}
            {payload.renderMechanism === "iframe" && (
              <div className={styles.inputGroup}>
                <div className={styles.inputGroupHeader}>
                  <label className={styles.label}>
                    URL <span className={styles.required}>*</span>
                  </label>
                  <HelpTooltip>
                    Enter the complete web address (URL) of the external
                    application, dashboard, or content that this portlet should
                    embed and display. Must start with `http://` or `https://`.
                  </HelpTooltip>
                </div>
                <input
                  type="url"
                  value={payload.url || ""}
                  onChange={(e) => handleChange("url", e.target.value)}
                  className={styles.input}
                  placeholder="https://example.com/portlet-app"
                  required
                />
              </div>
            )}

            {/* Conditional Component Name Input with HelpTooltip */}
            {payload.renderMechanism === "component" && (
              <div className={styles.inputGroup}>
                <div className={styles.inputGroupHeader}>
                  <label className={styles.label}>
                    Component Name <span className={styles.required}>*</span>
                  </label>
                  <HelpTooltip>
                    Provide the exact, case-sensitive name of the React
                    component that corresponds to this portlet. This name must
                    be pre-registered in your frontend's `PortletComponents.tsx`
                    registry.
                  </HelpTooltip>
                </div>
                <input
                  type="text"
                  value={payload.componentName || ""}
                  onChange={(e) =>
                    handleChange("componentName", e.target.value)
                  }
                  className={styles.input}
                  placeholder="e.g., SitePerformanceChart, UserList"
                  required
                />
              </div>
            )}

            {/* Is Child Portlet Checkbox with HelpTooltip */}
            <div className={styles.checkboxGroup}>
              <label className={styles.checkboxLabel}>
                <input
                  type="checkbox"
                  checked={payload.isChild}
                  onChange={(e) => handleChange("isChild", e.target.checked)}
                  className={styles.checkbox}
                />
                Is Child Portlet?
              </label>
              <HelpTooltip>
                Check this box if this portlet is intended to be a sub-component
                intended to be nested under a parent logical grouping. This
                affects how it appears in hierarchical navigation.
              </HelpTooltip>
            </div>

            {/* Conditional Parent Path Input with HelpTooltip */}
            {payload.isChild && (
              <div className={styles.inputGroup}>
                <div className={styles.inputGroupHeader}>
                  <label className={styles.label}>
                    Parent Path <span className={styles.required}>*</span>
                  </label>
                  <HelpTooltip>
                    Define the full hierarchical path (e.g.,
                    `Dashboard/Reports/Detailed`) where this child portlet
                    belongs within the portal's content structure. Use slashes
                    to denote levels.
                  </HelpTooltip>
                </div>
                <input
                  type="text"
                  value={payload.parentPath || ""}
                  onChange={(e) => handleChange("parentPath", e.target.value)}
                  className={styles.input}
                  placeholder="e.g., Dashboard/Reports (use slashes for hierarchy)"
                  required
                />
              </div>
            )}

            {/* Created By Input with HelpTooltip */}
            <div className={styles.inputGroup}>
              <div className={styles.inputGroupHeader}>
                <label className={styles.label}>
                  Created By <span className={styles.required}>*</span>
                </label>
                <HelpTooltip>
                  The name or role of the individual or team responsible for
                  creating or configuring this portlet. This defaults to your
                  current session username, but can be overridden if needed
                  (e.g., for system accounts).
                </HelpTooltip>
              </div>
              <input
                type="text"
                value={payload.createdBy}
                onChange={(e) => handleChange("createdBy", e.target.value)}
                className={styles.input}
                required
              />
            </div>

            {/* Add Long Description Checkbox with HelpTooltip */}
            <div className={styles.checkboxGroup}>
              <label className={styles.checkboxLabel}>
                <input
                  type="checkbox"
                  checked={showLongDescriptionField}
                  onChange={(e) => {
                    setShowLongDescriptionField(e.target.checked);
                    if (!e.target.checked)
                      handleChange("longDescription", undefined);
                  }}
                  className={styles.checkbox}
                />
                Add Long Description
              </label>
              <HelpTooltip>
                Enable this option to provide a more detailed, comprehensive
                explanation of the portlet's features, purpose, usage
                guidelines, or technical implementation notes. This is ideal for
                internal documentation or advanced user reference.
              </HelpTooltip>
            </div>

            {/* Conditional Long Description Textarea */}
            {showLongDescriptionField && (
              <div className={styles.inputGroup}>
                <label className={styles.label}>Long Description</label>
                <textarea
                  value={payload.longDescription || ""}
                  onChange={(e) =>
                    handleChange("longDescription", e.target.value)
                  }
                  rows={4}
                  className={styles.textarea}
                  placeholder="Provide a more detailed explanation of the portlet."
                />
              </div>
            )}

            {/* Add Test Notes Checkbox with HelpTooltip */}
            <div className={styles.checkboxGroup}>
              <label className={styles.checkboxLabel}>
                <input
                  type="checkbox"
                  checked={showTestNotesField}
                  onChange={(e) => {
                    setShowTestNotesField(e.target.checked);
                    if (!e.target.checked) handleChange("testNotes", undefined);
                  }}
                  className={styles.checkbox}
                />
                Add Test Notes
              </label>
              <HelpTooltip>
                Check this to include notes or specific test cases related to
                this portlet's development, functionality validation, or any
                known issues. This is useful for quality assurance and ongoing
                maintenance.
              </HelpTooltip>
            </div>

            {showTestNotesField && (
              <div className={styles.inputGroup}>
                <label className={styles.label}>Test Notes</label>
                <textarea
                  value={payload.testNotes || ""}
                  onChange={(e) => handleChange("testNotes", e.target.value)}
                  rows={4}
                  className={styles.textarea}
                  placeholder="Any specific test cases, considerations, or notes for this portlet."
                />
              </div>
            )}

            {/* Add Settings Checkbox with HelpTooltip */}
            <div className={styles.checkboxGroup}>
              <label className={styles.checkboxLabel}>
                <input
                  type="checkbox"
                  checked={showSettingsField}
                  onChange={(e) => {
                    setShowSettingsField(e.target.checked);
                    if (!e.target.checked) {
                      handleChange("settings", {});
                      setSettingsText("{}");
                      setMessage("");
                      setMessageType("");
                    }
                  }}
                  className={styles.checkbox}
                />
                Add Settings (JSON)
              </label>
              <HelpTooltip>
                Enable this to provide custom configuration data for the portlet
                in JSON format. This arbitrary data will be passed as
                `portletData.settings` to the rendering component for dynamic
                behavior (e.g., API endpoints, default filters, chart types).
              </HelpTooltip>
            </div>

            {showSettingsField && (
              <div className={styles.inputGroup}>
                <label className={styles.label}>Settings (JSON)</label>
                <textarea
                  value={settingsText}
                  onChange={(e) => handleSettings(e.target.value)}
                  rows={6}
                  className={`${styles.textarea} ${
                    messageType === "error" && message.includes("JSON")
                      ? styles.inputError
                      : ""
                  }`}
                  placeholder='{"apiKey": "your_api_key", "defaultView": "chart", "refreshInterval": 300}'
                />
                {messageType === "error" && message.includes("JSON") && (
                  <p className={styles.errorMessage}>{message}</p>
                )}
              </div>
            )}

            <div className={styles.formActions}>
              <button
                type="submit"
                className={`${styles.btn} ${styles.btnPrimary}`}
                disabled={
                  isLoading ||
                  (messageType === "error" && message.includes("JSON"))
                }
              >
                {isLoading ? "Processing..." : "Preview Portlet"}
              </button>
              <button
                type="button"
                className={`${styles.btn} ${styles.btnSecondary}`}
                onClick={handleReset}
                disabled={isLoading}
              >
                Reset Form
              </button>
            </div>
          </form>
        ) : (
          <div className={styles.previewContainer}>
            <h3 className={styles.previewTitle}>Portlet Details Preview</h3>
            <p className={styles.subtitle}>
              Please review the details below before confirming registration.
            </p>

            <div className={styles.previewGrid}>
              <div>
                <strong>Portlet Key:</strong>
              </div>
              <div>{payload.key}</div>
              <div>
                <strong>Title:</strong>
              </div>
              <div>{payload.title}</div>
              <div>
                <strong>Category:</strong>
              </div>
              <div>{payload.category}</div>
              <div>
                <strong>Description:</strong>
              </div>
              <div>{payload.description}</div>
              <div>
                <strong>Enabled:</strong>
              </div>
              <div>{payload.enabled ? "Yes" : "No"}</div>
              <div>
                <strong>Order:</strong>
              </div>
              <div>{payload.order}</div>
              <div>
                <strong>Render As:</strong>
              </div>
              <div>
                {payload.renderMechanism === "component"
                  ? "Local React Component"
                  : "External URL (Iframe)"}
              </div>
              {payload.renderMechanism === "iframe" && (
                <>
                  <div>
                    <strong>URL:</strong>
                  </div>
                  <div>{payload.url || "N/A"}</div>
                </>
              )}
              {payload.renderMechanism === "component" && (
                <>
                  <div>
                    <strong>Component Name:</strong>
                  </div>
                  <div>{payload.componentName || "N/A"}</div>
                </>
              )}
              <div>
                <strong>Is Child Portlet:</strong>
              </div>
              <div>{payload.isChild ? "Yes" : "No"}</div>
              {payload.isChild && (
                <>
                  <div>
                    <strong>Parent Path:</strong>
                  </div>
                  <div>{payload.parentPath || "N/A"}</div>
                </>
              )}
              <div>
                <strong>Created By:</strong>
              </div>
              <div>{payload.createdBy}</div>
            </div>

            {payload.longDescription && (
              <div className={styles.previewSection}>
                <h4>Long Description:</h4>
                <p className={styles.previewText}>{payload.longDescription}</p>
              </div>
            )}
            {payload.testNotes && (
              <div className={styles.previewSection}>
                <h4>Test Notes:</h4>
                <p className={styles.previewText}>{payload.testNotes}</p>
              </div>
            )}
            {Object.keys(payload.settings || {}).length > 0 && (
              <div className={styles.previewSection}>
                <h4>Settings (JSON):</h4>
                <pre className={styles.previewCode}>
                  {JSON.stringify(payload.settings, null, 2)}
                </pre>
              </div>
            )}

            <div className={styles.formActions}>
              <button
                type="button"
                className={`${styles.btn} ${styles.btnPrimary}`}
                onClick={handleSubmit}
                disabled={isLoading}
              >
                {isLoading ? "Submitting..." : "Confirm & Register"}
              </button>
              <button
                type="button"
                className={`${styles.btn} ${styles.btnSecondary}`}
                onClick={() => setIsPreviewMode(false)}
                disabled={isLoading}
              >
                Edit
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
